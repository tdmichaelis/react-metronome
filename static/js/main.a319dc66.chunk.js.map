{"version":3,"sources":["click1.wav","click2.wav","index.js","styles.module.css"],"names":["module","exports","App","props","handleChange","e","state","playing","startStop","setState","bpm","target","value","playClick","click1","play","clearInterval","timer","setInterval","count","Audio","click2","beatsPerMeasure","this","className","type","min","max","onChange","onClick","React","Component","ReactDOM","render","document","querySelector"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,uKCOrCC,G,8DACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAURC,aAAe,SAAAC,GACT,EAAKC,MAAMC,SACb,EAAKC,YAEP,EAAKC,SAAS,CACZC,IAAKL,EAAEM,OAAOC,SAhBC,EAmBnBC,UAAY,WACV,EAAKC,OAAOC,QApBK,EAuBnBP,UAAY,WACN,EAAKF,MAAMC,SAEbS,cAAc,EAAKC,OACnB,EAAKR,SAAS,CACZF,SAAS,MAIX,EAAKU,MAAQC,YACX,EAAKL,UACJ,GAAK,EAAKP,MAAMI,IAAO,KAE1B,EAAKD,SAAS,CACZU,MAAO,EACPZ,SAAS,GAEX,EAAKM,aAtCP,EAAKC,OAAS,IAAIM,MAAMN,KACxB,EAAKO,OAAS,IAAID,MAAMC,KACxB,EAAKf,MAAQ,CACXC,SAAS,EACTY,MAAO,EACPT,IAAK,IACLY,gBAAiB,GARF,E,qDA4CT,IAAD,EACkBC,KAAKjB,MAAtBC,EADD,EACCA,QAASG,EADV,EACUA,IACjB,OACE,6BACE,yBAAKc,UAAU,aACb,yBAAKA,UAAU,cACb,6BAAMd,EAAN,QACA,2BAAOe,KAAK,QAAQC,IAAI,KAAKC,IAAI,MAAMf,MAAOF,EAAKkB,SAAUL,KAAKnB,eAClE,4BAAQyB,QAASN,KAAKf,WAAYD,EAAU,OAAS,gB,GArD/CuB,IAAMC,YA6DxBC,IAASC,OACP,kBAAC/B,EAAD,MACAgC,SAASC,cAAc,W,oBCrEzBnC,EAAOC,QAAU,CAAC,UAAY,4B","file":"static/js/main.a319dc66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport click1 from './click1.wav'\nimport click2 from './click2.wav'\nimport styles from './styles.module.css'\nimport './test.css'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.click1 = new Audio(click1)\n    this.click2 = new Audio(click2)\n    this.state = {\n      playing: false,\n      count: 0,\n      bpm: 100,\n      beatsPerMeasure: 4\n    }\n  }\n  handleChange = e => {\n    if (this.state.playing) {\n      this.startStop()\n    }\n    this.setState({\n      bpm: e.target.value\n    })\n  }\n  playClick = () => {\n    this.click1.play()\n  }\n\n  startStop = () => {\n    if (this.state.playing) {\n      // Stop the timer\n      clearInterval(this.timer);\n      this.setState({\n        playing: false\n      })\n    } else {\n      // Start a timer with the current BPM\n      this.timer = setInterval(\n        this.playClick,\n        (60 / this.state.bpm) * 1000\n      )\n      this.setState({\n        count: 0,\n        playing: true\n      },\n      this.playClick\n      )\n    }\n  }\n  render() {\n    const { playing, bpm } = this.state\n    return (\n      <div>\n        <div className=\"metronome\">\n          <div className=\"bpm-slider\">\n            <div>{bpm} BPM</div>\n            <input type=\"range\" min=\"50\" max=\"240\" value={bpm} onChange={this.handleChange} />\n            <button onClick={this.startStop}>{playing ? 'Stop' : 'Start'}</button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.querySelector('#root')\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonRed\":\"styles_buttonRed__1uAp9\"};"],"sourceRoot":""}